// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int              @id @default(autoincrement())
  email              String           @unique
  name               String?
  password           String?          // Optional for magic link and Google auth
  role               Role             @default(USER)
  hashedRefreshToken String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  ownedWorkspaces    Workspace[]      // Workspaces created by this user
  workspaceAccess    WorkspaceUser[]  // Workspaces this user has access to
  comments           Comment[]        // Comments created by this user
  documentPermissions DocumentPermission[] // Document permissions for this user
  uploadedDocuments  Document[]       // Documents uploaded by this user
  events             CalendarEvent[]  // Calendar events for this user
  activities         Activity[]       // Activities for this user

  @@index([email])
}

model MagicLink {
  email     String   @id
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}

model Workspace {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  owner       User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     Int
  users       WorkspaceUser[]
  status      WorkspaceStatus @default(ACTIVE)
  cases       Case[]
  tags        Tag[]           // Workspace can have predefined tags
}

model Case {
  id          Int            @id @default(autoincrement())
  title       String
  description String?
  status      CaseStatus     @default(OPEN)
  priority    CasePriority   @default(MEDIUM)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  workspace   Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Int
  documents   Document[]     // Relation to documents
  caseTags    CaseTag[]      // Relation to tags
}

model Document {
  id           Int                 @id @default(autoincrement())
  name         String              // Display name
  originalName String              // Original filename
  mimeType     String              // File type (e.g., application/pdf)
  size         Int                 // File size in bytes
  path         String              // Storage path
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  case         Case                @relation(fields: [caseId], references: [id], onDelete: Cascade)
  caseId       Int
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  tags         DocumentTag[]       // Many-to-many relation to tags
  comments     Comment[]           // Comments on this document
  permissions  DocumentPermission[] // Document permissions
}

model Comment {
  id         Int       @id @default(autoincrement())
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  document   Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId Int
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model Tag {
  id           Int            @id @default(autoincrement())
  name         String
  color        String         // Hex color code for the tag
  workspace    Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId  Int
  documents    DocumentTag[]  // Many-to-many relation to documents
  cases        CaseTag[]      // Many-to-many relation to cases
  createdAt    DateTime       @default(now())
  
  @@unique([name, workspaceId]) // Ensure tag names are unique within a workspace
}

model DocumentTag {
  document     Document       @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId   Int
  tag          Tag            @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId        Int
  createdAt    DateTime       @default(now())

  @@id([documentId, tagId])
}

model WorkspaceUser {
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  role        WorkspaceRole @default(MEMBER)
  createdAt   DateTime @default(now())

  @@id([workspaceId, userId])
}

model CaseTag {
  case     Case       @relation(fields: [caseId], references: [id], onDelete: Cascade)
  caseId   Int
  tag      Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId    Int
  createdAt DateTime  @default(now())

  @@id([caseId, tagId])
}

enum Role {
  ADMIN
  EDITOR
  USER
}

enum WorkspaceStatus {
  ACTIVE
  ARCHIVED
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum CaseStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum CasePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PermissionType {
  VIEW
  EDIT
}

model DocumentPermission {
  id         Int            @id @default(autoincrement())
  document   Document       @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId Int
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  permission PermissionType
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([documentId, userId])
}

model CalendarEvent {
  id        Int      @id @default(autoincrement())
  title     String
  start     DateTime
  end       DateTime?
  status    String   @default("scheduled")
  notes     String?
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  reminders Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Activity {
  id          Int      @id @default(autoincrement())
  type        String
  description String
  userId      Int
  metadata    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}
